print
print()
print(hello world)
print("hello world")
exit
exit()
exit
exit()
# Create a sample collection
users = {'Hans': 'active', 'Éléonore': 'inactive', '景太郎': 'active'}
# Strategy:  Iterate over a copy
for user, status in users.copy().items():
    if status == 'inactive':
        del users[user]
# Strategy:  Create a new collection
active_users = {}
for user, status in users.items():
    if status == 'active':
        active_users[user] = status
clear
exit()
for i in range(5):
	print(i)
list(range(5, 10))
list(range(0, 10, 3))
list(range(-10, -100,-30))
a = ['Mary', 'had', 'a', 'little', 'lamb']
for i in range(len(a)):
    print(i, a[i])
range(10)
sum(range(4))
for n in range(2, 10):
for x in range(2, n):
for n in range(2, 10):
	for x in range(2, n):
		if n % x == 0:
			print(n, 'equals', x. '*', n//x)
for n in range(2, 10):
	for x in range(2, n):
		if n % x == 0:
			print(n, 'equals', x, '*', n//x)
			break
	else:
		print(n, 'is a prime number')
for n in range(2, 10):
	for x in range(2, n):
		if n % x == 0:
		print(n, 'is a prime number')
for n in range(2, 10):
	for x in range(2, n):
		if n % x == 0:
		print(n, 'is a prime number')
for n in range(2, 10):
	for x in range(2, n):
		if n % x == 0:
			print(n, 'equals', x, '*' n//x)
()
clear()
exit
exit()
for n in range (2, 20):
	if n % 2 == 0:
	
		continue
	print("Odd number", n)
	exit()
exit()
2+ 2
50 - 5*6
(50 - 5*6)/4
8 / 5
17 / 3
17 // 3
17 // 3 # discards the fractional part
17 % 3
5 * 3+ 2
5 ** 2
2 ** 7
tax = 12.5 / 100
price = 100.50
price * tax
price + _
round(_, 2)
(3+5j)
'"Isn\'t" they said'
'"Isn\'t," they said'
print('"Isn\'t," they said.')
'First line.\nSecondline
print('First line.\nSecondline')
'First line.\nSecondline'
print('First line.\nSecondline')
print('C:\some\name')
print(r'C:\some\name')
print("""\
Usage: thingy [OPTIONS]
     -h                        Display this usage message
     -H hostname               Hostname to connect to
""")
squares = [1, 14, 9, 12, 0]
squares
squares + [1, 14, 9, 12, 0]
squares + [1, 14, 9, 12, 360]
squares + [1, 14, 9, 12, 36]
cubes = [1, 8, 27, 65, 125]  # something's wrong here
4 ** 3  # the cube of 4 is 64, not 65!
cubes[3] = 64  # replace the wrong value
cubes
cubes.append(216)  # add the cube of 6
cubes.append(7 ** 3)  # and the cube of 7
cubes
letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
letters
# replace some values
letters[2:5] = ['C', 'D', 'E']
letters
# now remove them
letters[2:5] = []
letters
# clear the list by replacing all the elements with an empty list
letters[:] = []
letters
a = ['a', 'b', 'c']
n = [1, 2, 3]
x = [a, n]
x
#Fibonacci series
a, b = 0, 1
while a < 100:
	print(a)
	a, b = b a+b
	a, b = b, a+b
#Fibonacci series
	a, b = 0, 1
while a < 100:
	print(a)
	a, b = b, a+b
a, b = 0, 1
while a < 1000
a, b = 0, 1
while a < 1000:
	print a, end=',')
a, b = 0, 1
while a < 1000:
	print(a, end=',')
	a, b = b, a+b
clear()
a[len(a):] = [x]
fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana']
fruits.count('apple')
fruits.count('tangerine')
fruits.index('banana')
fruits.index('banana', 4)  # Find next banana starting a position 4
fruits.reverse()
fruits
fruits.append('grape')
fruits
fruits.sort()
fruits
fruits.pop()
stack = [3, 4, 5]
stack.append(6)
stack.append(7)
stack
stack.pop()
stack
stack.pop()
stack
fromcollections import deque
from collections import deque
queue = deque(["Eric", "John", "Micheal"])
queue = append("Terry")
from collections import deque
queue = deque(["Eric", "John", "Micheal"])
queue.append("Terry")
queue.append("Graham")
queue.popleft()
queue
squares = []
for x in range(20)
squares = []
for x in range(20):
	squares.apped(x**2)
squares = []
for x in range(20):
	squares.append(x**2)
	squares = []
for x in range(10):
    squares.append(x**2)
squares
squares = []
for x in range(10):
    squares.append(x**2)
squares
squares = []
for x in range(10):
    squares.append(x**2)
squares
squares = list(map(lambda x: x**2, range(10)))
squares = []
for x in range(10):
	squares = [x**2 for x in range(10)]
combs = []
for x in [1,2,3]:
    for y in [3,1,4]:
        if x != y:
            combs.append((x, y))
combs
vec = [-4, -2, 0, 2, 4]
# create a new list with the values doubled
[x*2 for x in vec]
# filter the list to exclude negative numbers
[x for x in vec if x >= 0]
# apply a function to all the elements
[abs(x) for x in vec]
# call a method on each element
freshfruit = ['  banana', '  loganberry ', 'passion fruit  ']
[weapon.strip() for weapon in freshfruit]
# create a list of 2-tuples like (number, square)
[(x, x**2) for x in range(6)]
# the tuple must be parenthesized, otherwise an error is raised
[x, x**2 for x in range(6)]
  File "<stdin>", line 1
    [x, x**2 for x in range(6)]
# flatten a list using a listcomp with two 'for'
vec = [[1,2,3], [4,5,6], [7,8,9]]
[num for elem in vec for num in elem]
from math import pi
[str(round(pi, i)) for i in range(1, 6)]
matrix = [
    [1, 2, 3, 4],
    [5, 6, 7, 8],
    [9, 10, 11, 12],
]
[[row[i] for row in matrix] for i in range(4)]
transposed = []
for i in range(4):
    transposed.append([row[i] for row in matrix])
transposed
transposed = []
>>> for i in range(4):
...     # the following 3 lines implement the nested listcomp
...     transposed_row = []
...     for row in matrix:
...         transposed_row.append(row[i])
...     transposed.append(transposed_row)
...
matrix = [
    [1, 2, 3, 4],
    [5, 6, 7, 8],
    [9, 10, 11, 12],
]
transposed = []
for i in range(4):
    # the following 3 lines implement the nested listcomp
    transposed_row = []
    for row in matrix:
        transposed_row.append(row[i])
    transposed.append(transposed_row)
transposed
list(zip(*matrix))
def my_functions():
	print("In my function")
my_function()
def my_functions():
	print("In my function")
exit()
# ask for the age
exit
exit()
